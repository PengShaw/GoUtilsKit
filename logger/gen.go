//go:build ignore

package main

import (
	"bytes"
	"os"
	"strings"
	"text/template"

	"github.com/PengShaw/GoUtilsKit/templater"
)

var text1 = `
// {{ .Name }}f record {{ .Name }} log followed by a call to {{ .Followed }}.
func (l *Logger) {{ .Name }}f(format string, v ...any) {
	if l.level <= Level{{ .Name }} {
		l.Logger.{{ .Name }}f("[{{ .Name | ToUpper }}] "+format, v...)
	}
}

// {{ .Name }}ln record {{ .Name }} log followed by a call to {{ .Followed }}.
func (l *Logger) {{ .Name }}ln(v ...any) {
	if l.level <= Level{{ .Name }} {
		v := append([]any{"[{{ .Name | ToUpper }}]"}, v...)
		l.Logger.{{ .Name }}ln(v...)
	}
}

// {{ .Name }} record {{ .Name }} log followed by a call to {{ .Followed }}.
func (l *Logger) {{ .Name }}(v ...any) {
	if l.level <= Level{{ .Name }} {
		v := append([]any{"[{{ .Name | ToUpper }}] "}, v...)
		l.Logger.{{ .Name }}(v...)
	}
}

// {{ .Name }}f record {{ .Name }} log followed by a call to {{ .Followed }}.
func {{ .Name }}f(format string, v ...any) {
	std.{{ .Name }}f(format, v...)
}

// {{ .Name }}ln record {{ .Name }} log followed by a call to {{ .Followed }}.
func {{ .Name }}ln(v ...any) {
	std.{{ .Name }}ln( v...)
}

// {{ .Name }} record {{ .Name }} log followed by a call to {{ .Followed }}.
func {{ .Name }}(v ...any) {
	std.{{ .Name }}(v...)
}
`

var text2 = `
// {{ .Name }}f record {{ .Name }} log.
func (l *Logger) {{ .Name }}f(format string, v ...any) {
	l.printf(Level{{ .Name }}, "[{{ .Name | ToUpper }}] "+format, v...)
}

// {{ .Name }}ln record {{ .Name }} log.
func (l *Logger) {{ .Name }}ln(v ...any) {
	v = append([]any{"[{{ .Name | ToUpper }}]"}, v...)
	l.println(Level{{ .Name }}, v...)
}

// {{ .Name }} record {{ .Name }} log.
func (l *Logger) {{ .Name }}(v ...any) {
	v = append([]any{"[{{ .Name | ToUpper }}] "}, v...)
	l.print(Level{{ .Name }}, v...)
}

// {{ .Name }}f record {{ .Name }} log.
func {{ .Name }}f(format string, v ...any) {
	std.{{ .Name }}f(format, v...)
}

// {{ .Name }}ln record {{ .Name }} log.
func {{ .Name }}ln(v ...any) {
	std.{{ .Name }}ln(v...)
}

// {{ .Name }} record {{ .Name }} log.
func {{ .Name }}(v ...any) {
	std.{{ .Name }}(v...)
}
`

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func writeFile(filename string, b []byte) {
	f, err := os.Create(filename)
	check(err)
	defer f.Close()
	_, err = f.Write(b)
	check(err)
}

func main() {
	var texts = []string{
		"// Code generated by gen.go; DO NOT EDIT.\n\npackage logger \n",
		text1,
		text1,
		text2,
		text2,
		text2,
		text2,
		text2,
	}
	var data = []any{
		"",
		struct {
			Name     string
			Followed string
		}{"Panic", "panic()"},
		struct {
			Name     string
			Followed string
		}{"Fatal", "os.Exit(1)"},
		struct {
			Name string
		}{"Error"},
		struct {
			Name string
		}{"Warn"},
		struct {
			Name string
		}{"Info"},
		struct {
			Name string
		}{"Debug"},
		struct {
			Name string
		}{"Trace"},
	}
	funcs := template.FuncMap{
		"ToUpper": strings.ToUpper,
	}

	var result bytes.Buffer
	for i := range texts {
		r, err := templater.RenderText(string(rune(i)), texts[i], data[i], funcs)
		check(err)
		result.Write(r)
	}

	writeFile("generated_logger.go", result.Bytes())
}

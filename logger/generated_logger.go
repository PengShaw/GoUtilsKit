// Code generated by gen.go; DO NOT EDIT.

package logger 

// Panicf record Panic log followed by a call to panic().
func (l *Logger) Panicf(format string, v ...any) {
	if l.level <= LevelPanic {
		l.Logger.Panicf("[PANIC] "+format, v...)
	}
}

// Panicln record Panic log followed by a call to panic().
func (l *Logger) Panicln(v ...any) {
	if l.level <= LevelPanic {
		v := append([]any{"[PANIC]"}, v...)
		l.Logger.Panicln(v...)
	}
}

// Panic record Panic log followed by a call to panic().
func (l *Logger) Panic(v ...any) {
	if l.level <= LevelPanic {
		v := append([]any{"[PANIC] "}, v...)
		l.Logger.Panic(v...)
	}
}

// Panicf record Panic log followed by a call to panic().
func Panicf(format string, v ...any) {
	std.Panicf(format, v...)
}

// Panicln record Panic log followed by a call to panic().
func Panicln(v ...any) {
	std.Panicln( v...)
}

// Panic record Panic log followed by a call to panic().
func Panic(v ...any) {
	std.Panic(v...)
}

// Fatalf record Fatal log followed by a call to os.Exit(1).
func (l *Logger) Fatalf(format string, v ...any) {
	if l.level <= LevelFatal {
		l.Logger.Fatalf("[FATAL] "+format, v...)
	}
}

// Fatalln record Fatal log followed by a call to os.Exit(1).
func (l *Logger) Fatalln(v ...any) {
	if l.level <= LevelFatal {
		v := append([]any{"[FATAL]"}, v...)
		l.Logger.Fatalln(v...)
	}
}

// Fatal record Fatal log followed by a call to os.Exit(1).
func (l *Logger) Fatal(v ...any) {
	if l.level <= LevelFatal {
		v := append([]any{"[FATAL] "}, v...)
		l.Logger.Fatal(v...)
	}
}

// Fatalf record Fatal log followed by a call to os.Exit(1).
func Fatalf(format string, v ...any) {
	std.Fatalf(format, v...)
}

// Fatalln record Fatal log followed by a call to os.Exit(1).
func Fatalln(v ...any) {
	std.Fatalln( v...)
}

// Fatal record Fatal log followed by a call to os.Exit(1).
func Fatal(v ...any) {
	std.Fatal(v...)
}

// Errorf record Error log.
func (l *Logger) Errorf(format string, v ...any) {
	l.printf(LevelError, "[ERROR] "+format, v...)
}

// Errorln record Error log.
func (l *Logger) Errorln(v ...any) {
	v = append([]any{"[ERROR]"}, v...)
	l.println(LevelError, v...)
}

// Error record Error log.
func (l *Logger) Error(v ...any) {
	v = append([]any{"[ERROR] "}, v...)
	l.print(LevelError, v...)
}

// Errorf record Error log.
func Errorf(format string, v ...any) {
	std.Errorf(format, v...)
}

// Errorln record Error log.
func Errorln(v ...any) {
	std.Errorln(v...)
}

// Error record Error log.
func Error(v ...any) {
	std.Error(v...)
}

// Warnf record Warn log.
func (l *Logger) Warnf(format string, v ...any) {
	l.printf(LevelWarn, "[WARN] "+format, v...)
}

// Warnln record Warn log.
func (l *Logger) Warnln(v ...any) {
	v = append([]any{"[WARN]"}, v...)
	l.println(LevelWarn, v...)
}

// Warn record Warn log.
func (l *Logger) Warn(v ...any) {
	v = append([]any{"[WARN] "}, v...)
	l.print(LevelWarn, v...)
}

// Warnf record Warn log.
func Warnf(format string, v ...any) {
	std.Warnf(format, v...)
}

// Warnln record Warn log.
func Warnln(v ...any) {
	std.Warnln(v...)
}

// Warn record Warn log.
func Warn(v ...any) {
	std.Warn(v...)
}

// Infof record Info log.
func (l *Logger) Infof(format string, v ...any) {
	l.printf(LevelInfo, "[INFO] "+format, v...)
}

// Infoln record Info log.
func (l *Logger) Infoln(v ...any) {
	v = append([]any{"[INFO]"}, v...)
	l.println(LevelInfo, v...)
}

// Info record Info log.
func (l *Logger) Info(v ...any) {
	v = append([]any{"[INFO] "}, v...)
	l.print(LevelInfo, v...)
}

// Infof record Info log.
func Infof(format string, v ...any) {
	std.Infof(format, v...)
}

// Infoln record Info log.
func Infoln(v ...any) {
	std.Infoln(v...)
}

// Info record Info log.
func Info(v ...any) {
	std.Info(v...)
}

// Debugf record Debug log.
func (l *Logger) Debugf(format string, v ...any) {
	l.printf(LevelDebug, "[DEBUG] "+format, v...)
}

// Debugln record Debug log.
func (l *Logger) Debugln(v ...any) {
	v = append([]any{"[DEBUG]"}, v...)
	l.println(LevelDebug, v...)
}

// Debug record Debug log.
func (l *Logger) Debug(v ...any) {
	v = append([]any{"[DEBUG] "}, v...)
	l.print(LevelDebug, v...)
}

// Debugf record Debug log.
func Debugf(format string, v ...any) {
	std.Debugf(format, v...)
}

// Debugln record Debug log.
func Debugln(v ...any) {
	std.Debugln(v...)
}

// Debug record Debug log.
func Debug(v ...any) {
	std.Debug(v...)
}

// Tracef record Trace log.
func (l *Logger) Tracef(format string, v ...any) {
	l.printf(LevelTrace, "[TRACE] "+format, v...)
}

// Traceln record Trace log.
func (l *Logger) Traceln(v ...any) {
	v = append([]any{"[TRACE]"}, v...)
	l.println(LevelTrace, v...)
}

// Trace record Trace log.
func (l *Logger) Trace(v ...any) {
	v = append([]any{"[TRACE] "}, v...)
	l.print(LevelTrace, v...)
}

// Tracef record Trace log.
func Tracef(format string, v ...any) {
	std.Tracef(format, v...)
}

// Traceln record Trace log.
func Traceln(v ...any) {
	std.Traceln(v...)
}

// Trace record Trace log.
func Trace(v ...any) {
	std.Trace(v...)
}
